---

- name: create virtual machine(s)
  hosts: all
  connection: local
  become: true
  become_user: root

  tasks:

  - name: install the virtual machine(s)
    command: virt-install 
      --name {{ inventory_hostname }} 
      --memory 2048 
      --disk size=16,pool=images 
      --location files/CentOS-7-x86_64-Minimal-1511.iso 
      --graphics none 
      --extra-args 'console=ttyS0,115200 serial ks=http://{{ ansible_virbr0.ipv4.address }}/el7.ks' 
      --os-type linux
      creates=/var/lib/libvirt/images/{{ inventory_hostname }}.qcow2
    delegate_to: localhost

  - name: wait for virt-install to complete
    virt: 
      name={{ inventory_hostname }}
      command=status
    register: vm_status
    until: vm_status.status == 'shutdown'
    retries: 120
    delay: 30
    delegate_to: localhost

  - name: grab vm mac addresses
    shell: virsh dumpxml {{ inventory_hostname }} | awk -F\' '/mac address/ { print $2 }'
    register: mac_address

  - name: check if mac-to-ip mapping exists
    command: grep -q {{ mac_address.stdout }} /var/lib/libvirt/dnsmasq/default.hostsfile
    register: mac_exists
    ignore_errors: true

  - name: configure static dhcp mapping
    command: virsh net-update default add ip-dhcp-host "<host mac='{{ mac_address.stdout }}' name='{{ inventory_hostname_short }}' ip='{{ ansible_host }}' />" --live --config
    delegate_to: localhost
    when: mac_exists.rc != 0

  - name: start the virtual machine(s)
    command: virsh start {{ inventory_hostname }}
    delegate_to: localhost

  # vars:
  # - {{ play_hosts }}
  # - {{ inventory_hostname }}
  # - {{ hostvars }}
  # - {{ mac_address }}
  # - {{ mac_exists }}
  #
  # - debug: 
  #     var: hostvars

# vim:sw=2:ts=2:et:ai
